<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!--
	包含以下子元素（有严格的顺序）：
    <properties> (0个或1个)
    <classPathEntry> (0个或多个)
    <context> (1个或多个)
	-->

    <!--
        在MBG的配置中，至少需要有一个<context>元素。
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；这种模型最简单，推荐使用;
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->

    <!-- context中元素的顺序为
    "context" 的内容必须匹配 "
    (property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+)
    -->

    <properties resource="generator.properties"/>
    <context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional">
        <!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,
                javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,
                javaClientGenerator?,table+ -->

        <!-- 生成的Java文件的编码-->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码-->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码-->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->

        <plugin type="com.scrats.rent.test.plugin.GenerateBaseMapperAndPagePlugin"/>
        <plugin type="com.scrats.rent.test.plugin.GenerateBaseServiceAndImplementPlugin">
            <property name="rootInterface" value="com.scrats.rent.base.service.BaseService"/>
            <property name="service" value="org.springframework.stereotype.Service"/>
            <property name="targetProject" value="src/main/java"/>
            <property name="targetPackage" value="${service-package}"/>
        </plugin>

        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="true"/>
            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>

        <!-- 数据库连接 -->
        <jdbcConnection
                driverClass="${db.driver}"
                connectionURL="${db.url}"
                userId="${db.user}"
                password="${db.password}">
        </jdbcConnection>
        <!-- 指定生成的类型为j
        ava类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <!--
				true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
				false：默认,
				   scale>0;length>18：使用BigDecimal;
				   scale=0;length[10,18]：使用Long；
				   scale=0;length[5,9]：使用Integer；
				   scale=0;length<5：使用Short；
			-->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="${bean-package}" targetProject="src/main/java">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <!--<property name="trimStrings" value="true"/>-->
            <property name="rootClass" value="com.scrats.rent.base.entity.BaseEntity"/>
        </javaModelGenerator>
        <!--对应的xml mapper文件  -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${dao-package}" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="rootInterface" value="com.scrats.rent.base.mapper.BaseMapper"/>
            <property name="repository" value="org.springframework.stereotype.Repository"/>
        </javaClientGenerator>

        <!-- 表名对应生成的实体 -->
        <!--<table tableName="tb_user" domainObjectName="UserBean" mapperName="UserMapper"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="tb_news" domainObjectName="NewsBean" mapperName="NewsMapper"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>-->
        <table tableName="tb_admin" domainObjectName="AdminEntity" mapperName="AdminMapper"
               enableCountByExample="false" enableUpdateByExample="false"
               enableDeleteByExample="false" enableSelectByExample="false"
               selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>

    </context>

</generatorConfiguration>