<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <contextName>rent</contextName>

    <property name="log.path" value="/Users/lol/log" />

    <!--控制台日志输出配置-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--对输出日志进行格式化-->
        <!--<encoder>-->
            <!--&lt;!&ndash; %d日期,%p日志级别,%file文件名,%line所在行数,%m输出的信息,%n换行 &ndash;&gt;-->
            <!--<pattern>%d %p (%file:%line\)- %m%n</pattern>-->
            <!--&lt;!&ndash;字符编码&ndash;&gt;-->
            <!--<charset>UTF-8</charset>&lt;!&ndash;此处设置字符集&ndash;&gt;-->
        <!--</encoder>-->
        <encoder>
            <!--<pattern>%d{HH:mm:ss.SSS} [%p] [%contextName] [%file:%line\] [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <pattern>%d{HH:mm:ss.SSS} [%contextName] [%thread] [%-5level] %logger{36} - %msg%n</pattern>
            <charset>UTF-8</charset><!--此处设置字符集-->
        </encoder>
    </appender>



    <!--日志文件配置-->
    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。-->
        <!--滚动记录文件：根据时间来制定滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/info/info-%d-%i.log</fileNamePattern>
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>64MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>
                %d %p (%file:%line\)- %m%n
            </pattern>
            <!--<pattern>%d{HH:mm:ss.SSS} [%p] [%contextName] [%file:%line\] [%thread] %-5level %logger{36} - %msg%n</pattern>-->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>
    <!--指定日志输出等级-->
    <root level="info">
        <appender-ref ref="infoFile" />
    </root>
    <!--TRACE < DEBUG < INFO < WARN < ERROR < FATAL-->
    <!--上述配置表名将 >=info级别的日志都输出到file-->

    <root level="info">
        <appender-ref ref="console" />
    </root>

    <!-- logback为java中的包 -->
    <!--logback.LogbackDemo：类的全路径 -->
    <!--name:用来指定受此logger约束的某一个包或者具体的某一个类-->
    <!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。-->
    <!--addtivity:是否向上级logger传递打印信息。默认是true-->
    <!--<logger name="com.scrats.rent" level="INFO" additivity="false">-->
        <!--<appender-ref ref="file"/>-->
    <!--</logger>-->
    <!--&lt;!&ndash;配置打印sql&ndash;&gt;-->
    <!--<logger name="com.scrats.rent.dao" level="DEBUG" additivity="false">-->
        <!--<appender-ref ref="console" />-->
    <!--</logger>-->
    <logger name="com.scrats.rent" level="INFO">
        <appender-ref ref="infoFile"/>
    </logger>

    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <springProfile name="test,dev">
        <!--配置打印sql-->
        <logger name="com.scrats.rent.dao" level="DEBUG" additivity="false">
            <appender-ref ref="console" />
        </logger>
    </springProfile>
    <!-- 生产环境. -->
    <springProfile name="prod">

    </springProfile>
</configuration>